use std::sync::{mpsc::channel, Arc, Mutex};
use std::thread;
use std::path::PathBuf;

mod walker;
mod worker;
mod stats;

use crate::worker::start_worker;
use crate::walker::walk_dir;
use crate::stats::FileStats;

fn main() {
    let (file_tx, file_rx) = channel(); // –ö–∞–Ω–∞–ª: –æ–±—Ö–æ–¥—á–∏–∫ ‚Üí –≤–æ—Ä–∫–µ—Ä—ã
    let (stats_tx, stats_rx) = channel(); // –ö–∞–Ω–∞–ª: –≤–æ—Ä–∫–µ—Ä—ã ‚Üí –≥–ª–∞–≤–Ω—ã–π –ø–æ—Ç–æ–∫

    let root_path = std::env::args()
        .nth(1)
        .expect("–£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏");
    let root_path = PathBuf::from(root_path);

    // –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º file_rx –≤ Arc<Mutex<...>>
    let shared_file_rx = Arc::new(Mutex::new(file_rx));

    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ö–æ–¥—á–∏–∫ (–æ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—É—Ç–∏ —Ñ–∞–π–ª–æ–≤ –≤ file_tx)
    let walker_tx = file_tx.clone();
    let walker = thread::spawn(move || {
        walk_dir(root_path, walker_tx);
    });

    // –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä—ã
    let num_workers = 4;
    for _ in 0..num_workers {
        let rx = Arc::clone(&shared_file_rx); // –ö–ª–æ–Ω–∏—Ä—É–µ–º Arc (–≤—Å—ë –µ—â—ë –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ Receiver)
        let tx = stats_tx.clone(); // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ

        thread::spawn(move || {
            loop {
                // üîí –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–∏—ë–º–Ω–∏–∫—É
                let path = {
                    let guard = rx.lock().unwrap(); // –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ Receiver
                    guard.recv() // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å
                };

                match path {
                    Ok(path) => {
                        worker::process_file(path, &tx); // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                    }
                    Err(_) => break, // –ö–∞–Ω–∞–ª –∑–∞–∫—Ä—ã—Ç ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–æ—Ç–æ–∫
                }
            }
        });
    }

    drop(file_tx);  // –ó–∞–≤–µ—Ä—à–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –ø—É—Ç–µ–π
    drop(stats_tx); // –ó–∞–≤–µ—Ä—à–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

    walker.join().unwrap(); // –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ö–æ–¥—á–∏–∫–∞

    // –°–æ–±–∏—Ä–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    let mut total_lines = 0;
    let mut total_words = 0;
    let mut total_bytes = 0;

    for stat in stats_rx.iter() {
        println!("{:?}", stat);
        total_lines += stat.lines;
        total_words += stat.words;
        total_bytes += stat.bytes;
    }

    println!(
        "–ò—Ç–æ–≥–æ: {} —Å—Ç—Ä–æ–∫, {} —Å–ª–æ–≤, {} –±–∞–π—Ç",
        total_lines, total_words, total_bytes
    );
}
